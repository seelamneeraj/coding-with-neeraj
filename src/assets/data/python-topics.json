{
    "introductionToPython": {
      "title": "Introduction to Python",
      "content": "Python is a widely-used programming language known for its readability, versatility, and simplicity...",
      "details": {
        "intro": "Python is a powerful scripting language that offers immediate code execution...",
        "whyChoosePython": [
          "Python is easy to learn due to its straightforwardness and readability.",
          "A robust and dynamic community provides resources and tools for beginners...",
          "Wide range of job prospects in data science, machine learning, web development, and more.",
          "Extensive built-in and third-party libraries enhance its versatility."
        ],
        "basicConcepts": {
          "variablesAndDataTypes": "Variables are containers for storing data values...",
          "operators": "Operators are symbols or keywords that perform operations on values or variables...",
          "comments": "Comments are lines of code that are not executed but are included to provide information about the code...",
          "controlStructures": "Control structures control the flow of execution in a program...",
          "functions": "Functions are blocks of code that can be called and executed when needed...",
          "modules": "Modules are collections of functions, variables, and other code that can be used in a program..."
        },
        "firstProgram": {
          "description": "The program prompts the user to enter two numbers, performs arithmetic operations, and displays results.",
          "steps": [
            "Open a text editor (e.g., Notepad, Sublime Text).",
            "Create a new file and start writing your code...",
            "Define variables and assign data types as needed...",
            "Use operators to perform calculations...",
            "Save the file with a .py extension and run the program using a command prompt."
          ],
          "programCode": "p = float(input('Enter a number: '))\nq = float(input('Enter another number: '))..."
        },
        "applications": [
          {
            "title": "Web Development",
            "description": "Python has various renowned web frameworks like Django and Flask..."
          },
          {
            "title": "Data Science and Machine Learning",
            "description": "Widely used in data science due to libraries like NumPy, Pandas, and Scikit-learn..."
          },
          {
            "title": "Desktop GUI Applications",
            "description": "Python provides libraries like Tkinter, PyQt, and PySide for GUI applications..."
          }
        ],
        "advantagesDisadvantages": {
          "advantages": [
            "Easy to learn and read",
            "Large community and library support",
            "Extensive frameworks and tools",
            "Ideal for data analysis and scientific computing"
          ],
          "disadvantages": [
            "Slower performance",
            "Limited mobile computing support",
            "Weak in high-end graphics and game development"
          ]
        },
        "conclusion": "Python is a great choice for beginners or experienced developers due to its ease of use..."
      }
    },
    "dataTypesInPython": {
      "title": "Data Types in Python",
      "content": "Python supports various data types, such as numbers, strings, lists, tuples, dictionaries, and more.",
      "overview": {
        "intro": "Understanding Python data types is fundamental in programming...",
        "description": "This article serves as a guide to the different data types in Python and their applications..."
      },
      "commonDataTypes": [
        "Numeric",
        "Sequence type",
        "Boolean",
        "Set",
        "Dictionary"
      ],
      "numeric": {
        "title": "Numeric Data Types",
        "description": "Numeric data types in Python represent data containing numeric values...",
        "types": [
          {
            "name": "Integer (int)",
            "content": "The integer class represents negative and positive whole numbers...",
            "example": "x = 20"
          },
          {
            "name": "Float (float)",
            "content": "The float class represents a real number with a decimal point...",
            "example": "x = 20.5"
          },
          {
            "name": "Complex numbers (complex)",
            "content": "The complex class represents a complex number data type...",
            "example": "x = 3j"
          }
        ]
      },
      "sequence": {
        "title": "Sequence Data Types",
        "description": "Sequence data types in Python allow you to organize and store multiple values efficiently...",
        "types": [
          {
            "name": "String",
            "content": "Strings in Python are sequences of characters...",
            "example": "x = 'Coursera'"
          },
          {
            "name": "List",
            "content": "Lists group related data and are mutable sequences...",
            "example": "x = ['apple', 'grapes', 'cherry']"
          },
          {
            "name": "Tuple",
            "content": "Tuples are ordered collections that are immutable...",
            "example": "x = ('apple', 'grapes', 'cherry')"
          }
        ]
      },
      "boolean": {
        "title": "Boolean Data Type",
        "description": "Boolean has two constant values: true or false...",
        "example": "x = True"
      },
      "set": {
        "title": "Set Data Type",
        "description": "Sets are unordered collections of data elements...",
        "example": "x = {'apple', 'grapes', 'cherry'}"
      },
      "dictionary": {
        "title": "Dictionary Data Type",
        "description": "Dictionaries are unordered sets of key-value pairs...",
        "example": "x = {'name': 'Rose', 'age': 16}"
      }
    },
    "functionsAndModules": {
      "title": "Functions and Modules",
      "content": "Functions are blocks of reusable code, and modules are files that contain Python code...",
      "topics": [
        {
          "name": "Defining Functions",
          "content": "Functions are defined using the def keyword...",
          "syntax": "def function_name(parameters):\n    # code to execute",
          "examples": [
            {
              "description": "Basic function definition",
              "code": "def greet(name):\n    return 'Hello, ' + name\nprint(greet('Alice'))"
            }
          ]
        },
        {
          "name": "Using Modules",
          "content": "Modules are used to organize code in Python...",
          "examples": [
            {
              "description": "Using the math module",
              "code": "import math\nprint(math.sqrt(16))  # Output: 4.0"
            }
          ]
        }
      ]
    },
    "objectOrientedProgramming": {
      "title": "Object-Oriented Programming",
      "content": "Python is an object-oriented programming language...",
      "topics": [
        {
          "name": "Classes and Objects",
          "content": "Classes are blueprints for creating objects...",
          "examples": [
            {
              "description": "Creating a class and an object",
              "code": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\nmy_dog = Dog('Buddy')\nprint(my_dog.name)"
            }
          ]
        },
        {
          "name": "Inheritance",
          "content": "Inheritance allows one class to inherit the attributes and methods of another class...",
          "examples": [
            {
              "description": "Basic inheritance",
              "code": "class Animal:\n    def speak(self):\n        return 'Some sound'\n\nclass Dog(Animal):\n    def speak(self):\n        return 'Woof!'\n\ndog = Dog()\nprint(dog.speak())"
            }
          ]
        }
      ]
    },
    "controlStructures": {
      "title": "Control Structures in Python",
      "content": "Control structures in Python are used to control the flow of execution of the program...",
      "typesContent": "There are three types of control structures in Python: Sequential, Selection, and Repetition...",
      "sequential": {
        "description": "Sequential statements are a set of statements whose execution process happens in a sequence...",
        "code": "# Python program to show how a sequential control structure works\n\na = 20\nb = 10\nc = a - b\nd = a + b\ne = a * b\nprint('The result of the subtraction is:', c)\nprint('The result of the addition is:', d)\nprint('The result of the multiplication is:', e)",
        "output": "The result of the subtraction is: 10\nThe result of the addition is: 30\nThe result of the multiplication is: 200"
      },
      "selection": {
        "description": "The statements used in selection control structures are also referred to as branching statements...",
        "types": ["Only if", "if-else", "nested if", "if-elif-else"],
        "simpleIf": {
          "description": "The if statement is used to test a specific condition...",
          "syntax": "if <conditional expression>:\n    # code block if condition is True",
          "code": "# Python program to show how a simple if statement works\n\nv = 5\nt = 4\nif v > t:\n    print(v, 'is bigger than', t)\n    v -= 2\nprint('The new value of v is', v, 'and t is', t)",
          "output": "The initial value of v is 5 and t is 4\n5 is bigger than 4\nThe new value of v is 3 and t is 4"
        },
        "ifElse": {
          "description": "If the condition in if is False, the else block executes...",
          "code": "# Python program to demonstrate if-else\n\nv = 4\nt = 5\nif v > t:\n    print('v is greater than t')\nelse:\n    print('v is less than t')",
          "output": "The value of v is 4 and t is 5\nv is less than t"
        }
      },
      "repetition": {
        "description": "To repeat a certain set of statements, we use the repetition structure...",
        "loops": ["For Loop", "While Loop"],
        "forLoop": {
          "description": "The for loop iterates over an iterable Python sequence...",
          "code": "# Python program to demonstrate a for loop\n\nl = [2, 4, 7, 1, 6, 4]\nfor i in range(len(l)):\n    print(l[i], end=', ')",
          "output": "2, 4, 7, 1, 6, 4,"
        },
        "whileLoop": {
          "description": "While loops execute a code block repeatedly as long as a condition is True...",
          "code": "# Python program to demonstrate a while loop\n\nb = 9\na = 2\nwhile a < b:\n    print(a, end=' ')\n    a += 1\n\nprint('While loop is completed')",
          "output": "2 3 4 5 6 7 8 While loop is completed"
        }
      }
    }
  }
  